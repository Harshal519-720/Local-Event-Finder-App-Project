import tkinter as tk
import requests

class EventFinderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Local Event Finder v2.0")
        
        # Configure API - Using your 50-character key
        self.API_KEY = "6CGROMFISJVD5Z5IQ3VEHSGF4CKXJFFRMGDEMNNLUBLR7H2DJ7"
        
        self.setup_ui()
    
    def setup_ui(self):
        # Styling
        self.root.configure(bg="#f0f0f0")
        title_font = ("Arial", 18, "bold")
        button_style = {
            "font": ("Arial", 12),
            "bg": "#4CAF50",
            "fg": "white",
            "activebackground": "#45a049",
            "borderwidth": 2,
            "relief": "groove"
        }
        
        # Input area
        tk.Label(
            self.root, 
            text="Enter City or Location:", 
            font=title_font, 
            bg="#f0f0f0"
        ).pack(pady=(15, 5))
        
        self.city_entry = tk.Entry(
            self.root, 
            font=("Arial", 14), 
            width=40,
            relief="sunken",
            borderwidth=2
        )
        self.city_entry.pack(pady=(0, 15))
        
        # Search button
        self.search_btn = tk.Button(
            self.root, 
            text="üîç Find Events", 
            command=self.handle_search,
            **button_style
        )
        self.search_btn.pack(pady=(0, 20))
        
        # Output area with scrollbar
        frame = tk.Frame(self.root, bg="#f0f0f0")
        frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 15))
        
        scrollbar = tk.Scrollbar(frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.results_box = tk.Text(
            frame,
            height=20,
            width=80,
            font=("Consolas", 11),
            wrap=tk.WORD,
            yscrollcommand=scrollbar.set,
            padx=10,
            pady=10,
            state=tk.DISABLED
        )
        self.results_box.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.results_box.yview)
        
        # Status bar
        self.status = tk.Label(
            self.root,
            text="Ready",
            bd=1,
            relief=tk.SUNKEN,
            anchor=tk.W,
            bg="#e0e0e0"
        )
        self.status.pack(fill=tk.X, padx=5, pady=5)
    
    def handle_search(self):
        city = self.city_entry.get().strip()
        if city:
            self.search_btn.config(state=tk.DISABLED, text="Searching...")
            self.root.update()  # Force UI update
            self.search_events(city)
            self.search_btn.config(state=tk.NORMAL, text="üîç Find Events")
        else:
            self.show_message("‚ö†Ô∏è Please enter a location", "red")
    
    def search_events(self, location):
        self.clear_results()
        self.update_status(f"Searching events in {location}...")
        
        try:
            response = requests.get(
                "https://www.eventbriteapi.com/v3/events/search/",
                headers={"Authorization": f"Bearer {self.API_KEY}"},
                params={
                    "location.address": location,
                    "expand": "venue,organizer",
                    "sort_by": "date",
                },
                timeout=10  # 10 second timeout
            )
            
            if response.status_code == 200:
                self.display_events(response.json())
                self.update_status(f"Found {len(response.json().get('events', []))} events", "green")
            else:
                error = response.json().get('error_description', 'Unknown API error')
                self.show_message(f"‚ùå Error {response.status_code}: {error}", "red")
                self.update_status(f"API Error: {error}", "red")
                
        except requests.exceptions.RequestException as e:
            self.show_message(f"‚ö†Ô∏è Network error: {str(e)}", "red")
            self.update_status("Connection failed", "red")
    
    def display_events(self, data):
        events = data.get("events", [])
        
        if not events:
            self.show_message("‚ÑπÔ∏è No events found for this location", "blue")
            return
            
        self.results_box.config(state=tk.NORMAL)
        for idx, event in enumerate(events[:15], 1):  # Show first 15 events
            self.results_box.insert(tk.END, self.format_event(event, idx))
        self.results_box.config(state=tk.DISABLED)
    
    def format_event(self, event, index):
        name = event.get("name", {}).get("text", "Untitled Event")
        date = self.format_date(event.get("start", {}).get("local"))
        venue = event.get("venue", {})
        organizer = event.get("organizer", {}).get("name", "Unknown organizer")
        
        venue_info = ""
        if venue:
            venue_info = f"{venue.get('name', 'Unknown venue')}"
            if venue.get('address', {}).get('localized_address_display'):
                venue_info += f" | {venue['address']['localized_address_display']}"
        
        return (
            f"üè∑Ô∏è EVENT #{index}\n"
            f"üìå {name}\n"
            f"üóìÔ∏è {date}\n"
            f"üèõÔ∏è {venue_info if venue_info else 'Online event'}\n"
            f"üë§ {organizer}\n"
            f"{'-'*60}\n\n"
        )
    
    def format_date(self, date_str):
        if not date_str:
            return "Date not specified"
        from datetime import datetime
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S")
            return dt.strftime("%a, %b %d %Y at %I:%M %p")
        except ValueError:
            return date_str
    
    def clear_results(self):
        self.results_box.config(state=tk.NORMAL)
        self.results_box.delete("1.0", tk.END)
        self.results_box.config(state=tk.DISABLED)
    
    def show_message(self, message, color="black"):
        self.clear_results()
        self.results_box.config(state=tk.NORMAL)
        self.results_box.tag_config("color", foreground=color)
        self.results_box.insert(tk.END, message + "\n", "color")
        self.results_box.config(state=tk.DISABLED)
    
    def update_status(self, message, color="black"):
        self.status.config(text=message, fg=color)

# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = EventFinderApp(root)
    
    # Center the window
    window_width = 900
    window_height = 700
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width // 2) - (window_width // 2)
    y = (screen_height // 2) - (window_height // 2)
    root.geometry(f"{window_width}x{window_height}+{x}+{y}")
    
    root.mainloop()
