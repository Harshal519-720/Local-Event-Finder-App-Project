import json
import os
import requests
from datetime import datetime
from tabulate import tabulate
from colorama import Fore, Style, init

init(autoreset=True)

# ============================
# Event Class
# ============================
class Event:
    def __init__(self, title, date_str, time_str, description, location):
        self.title = title
        self.date = datetime.strptime(date_str, "%Y-%m-%d").date()
        self.time = datetime.strptime(time_str, "%H:%M").time()
        self.description = description
        self.location = location

    def to_dict(self):
        return {
            "title": self.title,
            "date": self.date.strftime("%Y-%m-%d"),
            "time": self.time.strftime("%H:%M"),
            "description": self.description,
            "location": self.location
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            title=data["title"],
            date_str=data["date"],
            time_str=data["time"],
            description=data["description"],
            location=data["location"]
        )

    def __str__(self):
        return f"{self.title} in {self.location} on {self.date} at {self.time} - {self.description}"

# ============================
# Local Storage
# ============================
def save_events(events, filename):
    data = [event.to_dict() for event in events]
    with open(filename, "w") as f:
        json.dump(data, f, indent=4)

def load_events(filename):
    if not os.path.exists(filename):
        return []
    with open(filename, "r") as f:
        data = json.load(f)
        return [Event.from_dict(item) for item in data]

# ============================
# Viewing / Filtering
# ============================
def view_all_events(events):
    if not events:
        print(Fore.YELLOW + "No events saved.")
        return
    table = [[e.title, e.location, e.date, e.time, e.description] for e in events]
    print(tabulate(table, headers=["Title", "Location", "Date", "Time", "Description"], tablefmt="fancy_grid"))

def view_recent_events(events, year):
    recent = [e for e in events if e.date.year >= year]
    if not recent:
        print(Fore.YELLOW + "No upcoming events.")
        return
    for event in recent:
        print(f"{event.title} ({event.date.year}) in {event.location}")

def search_events(events, keyword):
    keyword = keyword.lower()
    matches = [e for e in events if keyword in e.title.lower() or keyword in e.description.lower()]
    return matches

def search_by_year(events, year_input):
    try:
        year = int(year_input)
        return [e for e in events if e.date.year == year]
    except ValueError:
        print("Invalid year.")
        return []

def search_by_location(events, city):
    city = city.lower()
    return [e for e in events if city in e.location.lower()]

# ============================
# Live Event Fetching (API)
# ============================
def fetch_live_events(city):
    API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"  # üîê Replace with your real Ticketmaster key
    url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=5"

    try:
        response = requests.get(url)
        data = response.json()
        events = data["_embedded"]["events"]
        print(Fore.MAGENTA + f"\nTop events in {city.title()}:")
        for e in events:
            name = e.get("name", "N/A")
            date = e["dates"]["start"].get("localDate", "Unknown")
            time = e["dates"]["start"].get("localTime", "Unknown")
            venue = e["_embedded"]["venues"][0].get("name", "Unknown Venue")
            print(Fore.CYAN + f"- {name} at {venue} on {date} {time}")
    except Exception as e:
        print(Fore.RED + f"Failed to fetch events: {e}")

# ============================
# Menu
# ============================
def main():
    events = load_events("events.json")

    while True:
        print(Fore.CYAN + "\n--- Local Event Finder ---")
        print("1. Add Event")
        print("2. View All Events")
        print("3. View Upcoming Events")
        print("4. Search by Keyword")
        print("5. Search by Year")
        print("6. Search by Location")
        print("7. Fetch Live Events (from Ticketmaster)")
        print("8. Exit")

        choice = input("Choose an option: ")

        if choice == "1":
            title = input("Enter title: ")
            date_str = input("Enter date (YYYY-MM-DD): ")
            time_str = input("Enter time (HH:MM): ")
            description = input("Enter description: ")
            location = input("Enter location: ")
            try:
                event = Event(title, date_str, time_str, description, location)
                events.append(event)
                print(Fore.GREEN + "Event added successfully!")
            except Exception as e:
                print(Fore.RED + f"Error adding event: {e}")

        elif choice == "2":
            view_all_events(events)

        elif choice == "3":
            year = datetime.now().year
            view_recent_events(events, year)

        elif choice == "4":
            keyword = input("Enter keyword: ")
            matches = search_events(events, keyword)
            if matches:
                for e in matches:
                    print(e)
            else:
                print(Fore.YELLOW + "No matches found.")

        elif choice == "5":
            year_input = input("Enter year: ")
            matches = search_by_year(events, year_input)
            if matches:
                for e in matches:
                    print(e)
            else:
                print(Fore.YELLOW + "No events found for that year.")

        elif choice == "6":
            city = input("Enter location/city: ")
            matches = search_by_location(events, city)
            if matches:
                for e in matches:
                    print(e)
            else:
                print(Fore.YELLOW + "No events found in that location.")

        elif choice == "7":
            city = input("Enter a city to fetch live events: ")
            fetch_live_events(city)

        elif choice == "8":
            save_events(events, "events.json")
            print("Goodbye!")
            break

        else:
            print("Invalid choice. Try again.")

# ============================
# Run App
# ============================
if __name__ == "__main__":
    main()

