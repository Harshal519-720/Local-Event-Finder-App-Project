import sys
import requests
import geocoder
from datetime import datetime
import flet as ft

CATEGORY_OPTIONS = ["All", "Music", "Sports", "Arts & Theater", "Film", "Miscellaneous"]
LANGUAGE_TRANSLATIONS = {
    "English": lambda text: text,
    "Espa√±ol": lambda text: text.replace("Venue", "Lugar").replace("Date", "Fecha").replace("Time", "Hora"),
    "Fran√ßais": lambda text: text.replace("Venue", "Lieu").replace("Date", "Date").replace("Time", "Heure")
}

def get_user_city():
    try:
        g = geocoder.ip('me')
        return g.city or ""
    except:
        return ""

def fetch_all_events(city, category, start_date=None, end_date=None):
    API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"
    classification = "" if category == "All" else f"&classificationName={category}"
    base_url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=200{classification}"
    all_events = []
    page = 0
    now = datetime.now().date()

    while True:
        url = f"{base_url}&page={page}"
        try:
            response = requests.get(url)
            data = response.json()

            if "_embedded" not in data or "events" not in data["_embedded"]:
                break

            events = data["_embedded"]["events"]
            for e in events:
                raw_date = e["dates"]["start"].get("localDate", "Unknown")
                try:
                    event_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                    if event_date < now:
                        continue
                    if start_date and event_date < start_date:
                        continue
                    if end_date and event_date > end_date:
                        continue
                except:
                    continue

                name = e.get("name", "N/A")
                raw_time = e["dates"]["start"].get("localTime", "Unknown")
                venue = e["_embedded"]["venues"][0].get("name", "Unknown Venue")

                try:
                    date = event_date.strftime("%B %d, %Y")
                except:
                    date = raw_date

                try:
                    time_obj = datetime.strptime(raw_time, "%H:%M:%S") if len(raw_time) > 5 else datetime.strptime(raw_time, "%H:%M")
                    time = time_obj.strftime("%I:%M %p")
                except:
                    time = raw_time

                entry = f"üéâ <b>{name}</b><br>üèüÔ∏è Venue: {venue}<br>üìÖ Date: {date}<br>‚è∞ Time: {time}<br><hr>"
                all_events.append({"text": entry, "event_date": event_date})

            if page >= data.get("page", {}).get("totalPages", 0) - 1:
                break
            page += 1

        except Exception as e:
            all_events.append({"text": f"‚ùå Error: {e}", "event_date": datetime.max})
            break

    if not all_events:
        return [{"text": f"‚ö†Ô∏è No events found for '{city}'.", "event_date": datetime.max}]
    return sorted(all_events, key=lambda x: x["event_date"])

def main(page: ft.Page):
    page.title = "Eventure Web"
    page.scroll = ft.ScrollMode.ALWAYS
    language = "English"
    results = []

    city_input = ft.TextField(label="Enter City", width=200)
    category_dropdown = ft.Dropdown(options=[ft.dropdown.Option(c) for c in CATEGORY_OPTIONS], value="All")
    start_date_picker = ft.DatePicker()
    end_date_picker = ft.DatePicker()
    result_column = ft.Column(scroll=ft.ScrollMode.ALWAYS)

    def translate(text):
        return LANGUAGE_TRANSLATIONS[language](text)

    def on_search_click(e=None):
        result_column.controls.clear()
        city = city_input.value.strip()
        category = category_dropdown.value
        start_date = start_date_picker.value
        end_date = end_date_picker.value
        event_data = fetch_all_events(city, category, start_date, end_date)
        for item in event_data:
            result_column.controls.append(ft.Text(translate(item["text"]), selectable=True))
        page.update()

    def change_language(e):
        nonlocal language
        language = e.control.value
        on_search_click()

    page.overlay.extend([start_date_picker, end_date_picker])

    search_row = ft.Row([
        city_input,
        category_dropdown,
        ft.ElevatedButton("Start Date", on_click=lambda _: start_date_picker.pick_date()),
        ft.ElevatedButton("End Date", on_click=lambda _: end_date_picker.pick_date()),
        ft.ElevatedButton("üîç Search", on_click=on_search_click),
        ft.Dropdown(
            value="English",
            options=[ft.dropdown.Option("English"), ft.dropdown.Option("Espa√±ol"), ft.dropdown.Option("Fran√ßais")],
            on_change=change_language
        )
    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)

    page.add(search_row, ft.Divider(), result_column)

ft.app(target=main, view=ft.WEB_BROWSER)
