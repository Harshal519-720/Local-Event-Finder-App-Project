import flet as ft
import requests
import geocoder
from datetime import datetime


def get_user_city():
    try:
        g = geocoder.ip('me')
        return g.city or ""
    except:
        return ""


def fetch_all_events(city, category):
    API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"
    classification = "" if category == "All" else f"&classificationName={category}"
    base_url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=200{classification}"
    all_events = []
    page = 0
    now = datetime.now().date()

    while True:
        url = f"{base_url}&page={page}"
        try:
            response = requests.get(url)
            data = response.json()

            if "_embedded" not in data or "events" not in data["_embedded"]:
                break

            events = data["_embedded"]["events"]
            for e in events:
                raw_date = e["dates"]["start"].get("localDate", "Unknown")
                try:
                    event_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                    if event_date < now:
                        continue
                except:
                    continue

                name = e.get("name", "N/A")
                raw_time = e["dates"]["start"].get("localTime", "Unknown")
                venue = e["_embedded"]["venues"][0].get("name", "Unknown Venue")
                url = e.get("url", "")
                images = e.get("images", [])
                image_url = images[0]["url"] if images else ""

                try:
                    date = event_date.strftime("%B %d, %Y")
                except:
                    date = raw_date

                try:
                    time_obj = datetime.strptime(raw_time, "%H:%M:%S") if len(raw_time) > 5 else datetime.strptime(raw_time, "%H:%M")
                    time = time_obj.strftime("%I:%M %p")
                except:
                    time = raw_time

                entry = {
                    "summary": f"üéâ {name}",
                    "venue": venue,
                    "date": date,
                    "time": time,
                    "url": url,
                    "image_url": image_url,
                    "event_date": event_date
                }

                all_events.append(entry)

            if page >= data.get("page", {}).get("totalPages", 0) - 1:
                break

            page += 1

        except Exception as e:
            all_events.append(
                {"summary": f"‚ùå Error: {e}", "event_date": datetime.max})
            break

    if not all_events:
        return [{"summary": f"‚ö†Ô∏è No events found for '{city}'.", "event_date": datetime.max}]
    return sorted(all_events, key=lambda x: x["event_date"])


def main(page: ft.Page):
    page.title = "Eventure - Flet Edition"
    page.scroll = ft.ScrollMode.AUTO
    page.theme_mode = ft.ThemeMode.LIGHT
    page.window_width = 720
    page.window_height = 700

    language_options = ["English", "Espa√±ol", "Fran√ßais"]
    categories = ["All", "Music", "Sports", "Arts & Theater", "Film", "Miscellaneous"]

    city_input = ft.TextField(label="Enter City", width=200)
    category_dropdown = ft.Dropdown(options=[ft.dropdown.Option(cat) for cat in categories], width=200, value="All")
    language_dropdown = ft.Dropdown(options=[ft.dropdown.Option(lang) for lang in language_options], width=150, value="English")
    output_box = ft.Column(scroll=ft.ScrollMode.ALWAYS, expand=True)
    dark_mode_switch = ft.Switch(label="Dark Mode", on_change=lambda e: toggle_theme())
    loading_indicator = ft.ProgressRing(visible=False)
    error_text = ft.Text("", color=ft.Colors.RED, visible=False)

    pagination_row = ft.Row([], alignment=ft.MainAxisAlignment.CENTER)

    last_results = []
    current_page = 1
    events_per_page = 20

    def translate(text, lang):
        translations = {
            "English": text,
            "Espa√±ol": text.replace("Venue", "Lugar").replace("Date", "Fecha").replace("Time", "Hora"),
            "Fran√ßais": text.replace("Venue", "Lieu").replace("Date", "Date").replace("Time", "Heure")
        }
        return translations.get(lang, text)

    def refresh_output():
        output_box.controls.clear()
        start = (current_page - 1) * events_per_page
        end = start + events_per_page
        page_events = last_results[start:end]

        for event in page_events:
            summary_text = ft.Text(event.get("summary", ""), size=16, weight="bold", expand=True)
            details = f"üèüÔ∏è Venue: {event.get('venue', 'Unknown')}\nüìÖ Date: {event.get('date', 'Unknown')}\n‚è∞ Time: {event.get('time', 'Unknown')}"
            detail_text = ft.Text(details, expand=True, selectable=True)

            ticket_link = ft.Text(
                spans=[
                    ft.TextSpan(
                        "üéüÔ∏è Tickets available here",
                        url=event.get("url", ""),
                        style=ft.TextStyle(decoration=ft.TextDecoration.UNDERLINE, color=ft.colors.BLUE)
                    )
                ],
                selectable=True
            )

            image = ft.Image(src=event.get("image_url", ""), width=180, height=100) if event.get("image_url") else None

            event_column = ft.Column([
                ft.Row([image if image else ft.Container(), ft.Column([summary_text, detail_text], expand=True)], spacing=20),
                ft.Row([ticket_link])
            ], spacing=10)

            output_box.controls.append(ft.Container(content=event_column, padding=10))

        render_pagination()
        page.update()

    def render_pagination():
        pagination_row.controls.clear()
        total_pages = (len(last_results) + events_per_page - 1) // events_per_page
        for i in range(1, total_pages + 1):
            pagination_row.controls.append(
                ft.TextButton(str(i), on_click=lambda e, p=i: change_page(p)))

    def change_page(page_num):
        nonlocal current_page
        current_page = page_num
        refresh_output()

    def toggle_theme():
        page.theme_mode = ft.ThemeMode.DARK if dark_mode_switch.value else ft.ThemeMode.LIGHT
        page.update()

    def on_search_click(e):
        nonlocal last_results, current_page
        error_text.visible = False
        city = city_input.value.strip()
        category = category_dropdown.value
        loading_indicator.visible = True
        output_box.controls.clear()
        pagination_row.controls.clear()
        page.update()
        try:
            last_results = fetch_all_events(city, category)
            current_page = 1
            refresh_output()
        except Exception as ex:
            error_text.value = str(ex)
            error_text.visible = True
        loading_indicator.visible = False
        page.update()

    city_row = ft.Row([
        city_input,
        category_dropdown,
        ft.ElevatedButton("üîç Search", on_click=on_search_click),
        language_dropdown,
        dark_mode_switch
    ], alignment=ft.MainAxisAlignment.CENTER, spacing=10)

    page.add(ft.Column([
        ft.Text("Eventure", size=32, weight="bold"),
        city_row,
        loading_indicator,
        error_text,
        output_box,
        pagination_row
    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER))

    user_city = get_user_city()
    if user_city:
        city_input.value = user_city
        last_results.extend(fetch_all_events(user_city, category_dropdown.value))
        refresh_output()


ft.app(target=main, view=ft.WEB_BROWSER)
