import React, { useState, useEffect } from 'react';
import { Search, Calendar, MapPin, Clock, ExternalLink, Star, Music, Theater, Gamepad2, Trophy, Key, AlertCircle } from 'lucide-react';

const TicketmasterEventFinder = () => {
  const [apiKey, setApiKey] = useState('');
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [city, setCity] = useState('');
  const [category, setCategory] = useState('');
  const [dateFrom, setDateFrom] = useState('');
  const [dateTo, setDateTo] = useState('');
  const [page, setPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  const categories = [
    { value: '', label: 'All Categories' },
    { value: 'KZFzniwnSyZfZ7v7nJ', label: 'Music' },
    { value: 'KZFzniwnSyZfZ7v7na', label: 'Sports' },
    { value: 'KZFzniwnSyZfZ7v7n1', label: 'Arts & Theatre' },
    { value: 'KZFzniwnSyZfZ7v7nn', label: 'Film' },
    { value: 'KZFzniwnSyZfZ7v7nE', label: 'Miscellaneous' }
  ];

  const searchEvents = async () => {
    if (!apiKey.trim()) {
      setError('Please enter your Ticketmaster API key');
      return;
    }

    setLoading(true);
    setError('');

    try {
      let url = `https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&size=20&page=${page}`;
      
      if (searchTerm) url += `&keyword=${encodeURIComponent(searchTerm)}`;
      if (city) url += `&city=${encodeURIComponent(city)}`;
      if (category) url += `&classificationId=${category}`;
      if (dateFrom) url += `&startDateTime=${dateFrom}T00:00:00Z`;
      if (dateTo) url += `&endDateTime=${dateTo}T23:59:59Z`;

      const response = await fetch(url);
      const data = await response.json();

      if (response.ok && data._embedded && data._embedded.events) {
        setEvents(data._embedded.events);
        setTotalPages(data.page ? data.page.totalPages : 1);
      } else if (response.status === 401) {
        setError('Invalid API key. Please check your Consumer Key.');
        setEvents([]);
      } else {
        setError(data.fault ? data.fault.faultstring : 'No events found. Try different search criteria.');
        setEvents([]);
      }
    } catch (err) {
      setError('Network error. Please check your connection and try again.');
      setEvents([]);
    }

    setLoading(false);
  };

  const handleSearch = () => {
    setPage(0);
    searchEvents();
  };

  const loadDefaultEvents = async () => {
    if (!apiKey.trim()) return;
    
    setLoading(true);
    try {
      const response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&size=20&countryCode=US`);
      const data = await response.json();
      
      if (response.ok && data._embedded && data._embedded.events) {
        setEvents(data._embedded.events);
        setTotalPages(data.page ? data.page.totalPages : 1);
      }
    } catch (err) {
      console.log('Could not load default events');
    }
    setLoading(false);
  };

  useEffect(() => {
    if (apiKey.trim()) {
      loadDefaultEvents();
    }
  }, [apiKey]);

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const formatTime = (dateString) => {
    return new Date(dateString).toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  };

  const getEventImage = (event) => {
    if (event.images && event.images.length > 0) {
      const largeImage = event.images.find(img => img.width >= 640);
      return largeImage ? largeImage.url : event.images[0].url;
    }
    return 'https://via.placeholder.com/400x300/1a365d/ffffff?text=No+Image';
  };

  const getVenueName = (event) => {
    if (event._embedded && event._embedded.venues && event._embedded.venues.length > 0) {
      return event._embedded.venues[0].name;
    }
    return 'Venue TBA';
  };

  const getVenueLocation = (event) => {
    if (event._embedded && event._embedded.venues && event._embedded.venues.length > 0) {
      const venue = event._embedded.venues[0];
      if (venue.city && venue.city.name && venue.state && venue.state.name) {
        return `${venue.city.name}, ${venue.state.name}`;
      }
    }
    return 'Location TBA';
  };

  const getPriceRange = (event) => {
    if (event.priceRanges && event.priceRanges.length > 0) {
      const price = event.priceRanges[0];
      return `$${price.min} - $${price.max}`;
    }
    return 'Price TBA';
  };

  const goToNextPage = () => {
    if (page < totalPages - 1) {
      const newPage = page + 1;
      setPage(newPage);
      setTimeout(() => {
        searchEvents();
      }, 100);
    }
  };

  const goToPrevPage = () => {
    if (page > 0) {
      const newPage = page - 1;
      setPage(newPage);
      setTimeout(() => {
        searchEvents();
      }, 100);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">ðŸŽ« Event Finder</h1>
          <p className="text-gray-600">Discover amazing events near you with Ticketmaster</p>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <div className="flex items-center gap-2 mb-3">
            <Key className="w-5 h-5 text-blue-600" />
            <h2 className="text-lg font-semibold text-gray-800">Enter Your API Key</h2>
          </div>
          <div className="flex gap-3">
            <input
              type="password"
              placeholder="Paste your Ticketmaster Consumer Key here..."
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              onClick={loadDefaultEvents}
              disabled={!apiKey.trim()}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              Connect
            </button>
          </div>
          <p className="text-sm text-gray-500 mt-2">
            Your API key is stored securely in your browser and never shared.
          </p>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4">
            <input
              type="text"
              placeholder="Search events..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            
            <input
              type="text"
              placeholder="City"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            
            <select
              value={category}
              onChange={(e) => setCategory(e.target.value)}
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {categories.map(cat => (
                <option key={cat.value} value={cat.value}>{cat.label}</option>
              ))}
            </select>
            
            <input
              type="date"
              value={dateFrom}
              onChange={(e) => setDateFrom(e.target.value)}
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            
            <input
              type="date"
              value={dateTo}
              onChange={(e) => setDateTo(e.target.value)}
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <button
            onClick={handleSearch}
            disabled={loading || !apiKey.trim()}
            className="w-full md:w-auto px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 disabled:from-gray-400 disabled:to-gray-400 disabled:cursor-not-allowed transition-all duration-300 flex items-center justify-center gap-2"
          >
            <Search className="w-5 h-5" />
            {loading ? 'Searching...' : 'Search Events'}
          </button>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-center gap-2">
            <AlertCircle className="w-5 h-5 text-red-600" />
            <p className="text-red-700">{error}</p>
          </div>
        )}

        {loading && (
          <div className="text-center py-12">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent"></div>
            <p className="mt-4 text-gray-600">Finding amazing events...</p>
          </div>
        )}

        {events.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {events.map((event) => (
              <div key={event.id} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
                <div className="relative">
                  <img
                    src={getEventImage(event)}
                    alt={event.name}
                    className="w-full h-48 object-cover"
                  />
                  <div className="absolute top-4 right-4 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-sm">
                    {event.classifications && event.classifications.length > 0 && event.classifications[0].segment 
                      ? event.classifications[0].segment.name 
                      : 'Event'}
                  </div>
                </div>
                
                <div className="p-4">
                  <h3 className="font-bold text-lg text-gray-800 mb-2 overflow-hidden">
                    {event.name}
                  </h3>
                  
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2 text-gray-600">
                      <Calendar className="w-4 h-4" />
                      <span className="text-sm">
                        {event.dates && event.dates.start && event.dates.start.localDate 
                          ? formatDate(event.dates.start.localDate)
                          : 'Date TBA'}
                      </span>
                    </div>
                    
                    {event.dates && event.dates.start && event.dates.start.localTime && (
                      <div className="flex items-center gap-2 text-gray-600">
                        <Clock className="w-4 h-4" />
                        <span className="text-sm">
                          {formatTime(event.dates.start.localDate + 'T' + event.dates.start.localTime)}
                        </span>
                      </div>
                    )}
                    
                    <div className="flex items-center gap-2 text-gray-600">
                      <MapPin className="w-4 h-4" />
                      <span className="text-sm">{getVenueName(event)}</span>
                    </div>
                    
                    <div className="text-sm text-gray-500">
                      {getVenueLocation(event)}
                    </div>
                    
                    <div className="text-lg font-semibold text-green-600">
                      {getPriceRange(event)}
                    </div>
                  </div>
                  
                  <a
                    href={event.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-2 px-4 rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 flex items-center justify-center gap-2"
                  >
                    <ExternalLink className="w-4 h-4" />
                    Get Tickets
                  </a>
                </div>
              </div>
            ))}
          </div>
        )}

        {totalPages > 1 && (
          <div className="flex justify-center items-center gap-4 mt-8">
            <button
              onClick={goToPrevPage}
              disabled={page === 0}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg disabled:bg-gray-400 disabled:cursor-not-allowed hover:bg-blue-700 transition-colors"
            >
              Previous
            </button>
            
            <span className="text-gray-600">
              Page {page + 1} of {totalPages}
            </span>
            
            <button
              onClick={goToNextPage}
              disabled={page >= totalPages - 1}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg disabled:bg-gray-400 disabled:cursor-not-allowed hover:bg-blue-700 transition-colors"
            >
              Next
            </button>
          </div>
        )}

        {!apiKey && (
          <div className="text-center py-12">
            <Key className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-600 mb-2">Ready to Find Events?</h3>
            <p className="text-gray-500">Enter your Ticketmaster API key above to start discovering amazing events!</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default TicketmasterEventFinder;
