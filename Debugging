# main.py

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.scrollview import ScrollView
from kivy.uix.gridlayout import GridLayout
from kivy.core.window import Window
import requests
from datetime import datetime

# Set default window size for desktop testing
Window.size = (360, 640)

light_theme = {
    "bg": [0.97, 0.98, 0.99, 1],
    "fg": [0.18, 0.18, 0.18, 1],
    "button_bg": [0.25, 0.32, 0.71, 1],
    "button_fg": [1, 1, 1, 1]
}

dark_theme = {
    "bg": [0.12, 0.12, 0.12, 1],
    "fg": [0.88, 0.88, 0.88, 1],
    "button_bg": [0.36, 0.42, 0.75, 1],
    "button_fg": [1, 1, 1, 1]
}

class EventureApp(App):
    def build(self):
        self.current_theme = light_theme
        self.title = "Eventure"

        self.layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        self.layout.canvas.before.clear()

        self.city_input = TextInput(hint_text='Enter city name', size_hint_y=None, height=50, multiline=False)
        self.search_button = Button(text='Search Events', size_hint_y=None, height=50, on_press=self.search_events)
        self.theme_button = Button(text='Toggle Theme', size_hint_y=None, height=50, on_press=self.toggle_theme)

        self.result_container = GridLayout(cols=1, spacing=10, size_hint_y=None)
        self.result_container.bind(minimum_height=self.result_container.setter('height'))

        self.scroll = ScrollView()
        self.scroll.add_widget(self.result_container)

        self.layout.add_widget(Label(text='Eventure', font_size=28, size_hint_y=None, height=60))
        self.layout.add_widget(self.city_input)
        self.layout.add_widget(self.search_button)
        self.layout.add_widget(self.theme_button)
        self.layout.add_widget(self.scroll)

        self.apply_theme()
        return self.layout

    def apply_theme(self):
        Window.clearcolor = self.current_theme['bg']
        widgets = [self.layout, self.search_button, self.theme_button, self.city_input]
        for widget in widgets:
            widget.background_color = self.current_theme['button_bg']
            if hasattr(widget, 'color'):
                widget.color = self.current_theme['fg']

    def toggle_theme(self, instance):
        self.current_theme = dark_theme if self.current_theme == light_theme else light_theme
        self.apply_theme()

    def search_events(self, instance):
        self.result_container.clear_widgets()
        city = self.city_input.text.strip()
        if not city:
            self.result_container.add_widget(Label(text="\u26A0\ufe0f Please enter a valid city."))
            return

        API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"
        url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=5"

        try:
            response = requests.get(url)
            data = response.json()
            if "_embedded" not in data or "events" not in data["_embedded"]:
                self.result_container.add_widget(Label(text=f"\u26A0\ufe0f No events found for '{city}'."))
                return

            for e in data["_embedded"]["events"]:
                name = e.get("name", "N/A")
                raw_date = e["dates"]["start"].get("localDate", "Unknown")
                raw_time = e["dates"]["start"].get("localTime", "Unknown")
                venue = e["_embedded"]["venues"][0].get("name", "Unknown Venue")

                try:
                    date = datetime.strptime(raw_date, "%Y-%m-%d").strftime("%B %d, %Y")
                except:
                    date = raw_date

                try:
                    time_obj = datetime.strptime(raw_time, "%H:%M:%S") if len(raw_time) > 5 else datetime.strptime(raw_time, "%H:%M")
                    time = time_obj.strftime("%I:%M %p")
                except:
                    time = raw_time

                event_text = f"\u2728 {name}\n\U0001F3AD Venue: {venue}\n\U0001F4C5 Date: {date}\n\u23F0 Time: {time}\n{'-'*40}"
                self.result_container.add_widget(Label(text=event_text, halign='left', valign='top', text_size=(Window.width - 40, None)))

        except Exception as e:
            self.result_container.add_widget(Label(text=f"\u274C Error: {e}"))

if __name__ == '__main__':
    EventureApp().run()
