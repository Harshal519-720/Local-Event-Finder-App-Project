import React, { useState } from 'react';
import { Search, Calendar, MapPin, Clock, Users, ExternalLink } from 'lucide-react';

const EventFinder = () => {
  const [searchLocation, setSearchLocation] = useState('');
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);

  // Sample events data - in a real app, this would come from an API
  const sampleEvents = [
    {
      id: 1,
      title: "Broadway Show: The Lion King",
      location: "Minskoff Theatre, New York",
      date: "2025-06-15",
      time: "7:30 PM",
      category: "Theater",
      price: "$89 - $250",
      description: "Experience Disney's award-winning musical phenomenon.",
      attendees: 1200,
      image: "üé≠"
    },
    {
      id: 2,
      title: "Central Park Summer Concert",
      location: "Central Park, New York",
      date: "2025-06-20",
      time: "6:00 PM",
      category: "Music",
      price: "Free",
      description: "Outdoor concert featuring local indie bands.",
      attendees: 500,
      image: "üéµ"
    },
    {
      id: 3,
      title: "Brooklyn Food Festival",
      location: "Prospect Park, Brooklyn",
      date: "2025-06-22",
      time: "11:00 AM",
      category: "Food",
      price: "$25",
      description: "Taste the best of Brooklyn's culinary scene.",
      attendees: 800,
      image: "üçï"
    },
    {
      id: 4,
      title: "NYC Tech Meetup",
      location: "WeWork, Manhattan",
      date: "2025-06-18",
      time: "7:00 PM",
      category: "Technology",
      price: "Free",
      description: "Network with tech professionals and learn about latest trends.",
      attendees: 150,
      image: "üíª"
    },
    {
      id: 5,
      title: "Metropolitan Museum Art Exhibition",
      location: "Metropolitan Museum, New York",
      date: "2025-06-25",
      time: "10:00 AM",
      category: "Art",
      price: "$30",
      description: "Special exhibition featuring contemporary artists.",
      attendees: 300,
      image: "üé®"
    },
    {
      id: 6,
      title: "Yankees vs Red Sox",
      location: "Yankee Stadium, Bronx",
      date: "2025-06-28",
      time: "1:00 PM",
      category: "Sports",
      price: "$45 - $200",
      description: "Classic rivalry game between Yankees and Red Sox.",
      attendees: 50000,
      image: "‚öæ"
    }
  ];

  const handleSearch = async (e) => {
    if (e) e.preventDefault();
    if (!searchLocation.trim()) return;
    setLoading(true);
    setHasSearched(true);
    
    // Simulate API call delay
    setTimeout(() => {
      if (searchLocation.toLowerCase().includes('new york') || 
          searchLocation.toLowerCase().includes('nyc') ||
          searchLocation.toLowerCase().includes('manhattan') ||
          searchLocation.toLowerCase().includes('brooklyn')) {
        setEvents(sampleEvents);
      } else if (searchLocation.toLowerCase().includes('los angeles') || 
                 searchLocation.toLowerCase().includes('la')) {
        setEvents([
          {
            id: 7,
            title: "Hollywood Bowl Concert",
            location: "Hollywood Bowl, Los Angeles",
            date: "2025-06-16",
            time: "8:00 PM",
            category: "Music",
            price: "$50 - $150",
            description: "Evening concert under the stars.",
            attendees: 2000,
            image: "üéº"
          },
          {
            id: 8,
            title: "Santa Monica Beach Festival",
            location: "Santa Monica Pier, CA",
            date: "2025-06-21",
            time: "12:00 PM",
            category: "Festival",
            price: "Free",
            description: "Beach activities and live entertainment.",
            attendees: 1000,
            image: "üèñÔ∏è"
          }
        ]);
      } else {
        setEvents([]);
      }
      setLoading(false);
    }, 1000);
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const getCategoryColor = (category) => {
    const colors = {
      'Theater': 'bg-purple-100 text-purple-800',
      'Music': 'bg-blue-100 text-blue-800',
      'Food': 'bg-orange-100 text-orange-800',
      'Technology': 'bg-green-100 text-green-800',
      'Art': 'bg-pink-100 text-pink-800',
      'Sports': 'bg-red-100 text-red-800',
      'Festival': 'bg-yellow-100 text-yellow-800'
    };
    return colors[category] || 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold text-gray-800 mb-4">
            Find Events Near You
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Discover amazing events happening in your city. From concerts to food festivals, 
            find your next adventure.
          </p>
        </div>

        {/* Search Form */}
        <div className="max-w-2xl mx-auto mb-12">
          <div className="flex gap-4">
            <div className="flex-1 relative">
              <MapPin className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                value={searchLocation}
                onChange={(e) => setSearchLocation(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSearch(e)}
                placeholder="Enter city name (try 'New York' or 'Los Angeles')"
                className="w-full pl-12 pr-4 py-4 text-lg border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none transition-colors"
              />
            </div>
            <button
              onClick={handleSearch}
              disabled={loading}
              className="px-8 py-4 bg-blue-600 text-white rounded-xl hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-200 transition-all duration-200 flex items-center gap-2 font-semibold disabled:opacity-50"
            >
              {loading ? (
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <Search className="w-5 h-5" />
              )}
              Search
            </button>
          </div>
        </div>

        {/* Loading State */}
        {loading && (
          <div className="text-center py-12">
            <div className="inline-block w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4"></div>
            <p className="text-gray-600">Searching for events...</p>
          </div>
        )}

        {/* No Events Found */}
        {hasSearched && !loading && events.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üîç</div>
            <h2 className="text-2xl font-semibold text-gray-800 mb-2">
              No events found
            </h2>
            <p className="text-gray-600 mb-6">
              Try searching for "New York" or "Los Angeles" to see sample events.
            </p>
          </div>
        )}

        {/* Events Grid */}
        {events.length > 0 && (
          <div className="max-w-6xl mx-auto">
            <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
              {events.length} Events Found
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {events.map((event) => (
                <div key={event.id} className="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden">
                  {/* Event Image/Icon */}
                  <div className="h-48 bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                    <span className="text-6xl">{event.image}</span>
                  </div>
                  
                  <div className="p-6">
                    {/* Category Badge */}
                    <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium mb-3 ${getCategoryColor(event.category)}`}>
                      {event.category}
                    </span>
                    
                    {/* Event Title */}
                    <h3 className="text-xl font-bold text-gray-800 mb-2 line-clamp-2">
                      {event.title}
                    </h3>
                    
                    {/* Event Description */}
                    <p className="text-gray-600 mb-4 line-clamp-2">
                      {event.description}
                    </p>
                    
                    {/* Event Details */}
                    <div className="space-y-2 mb-4">
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <Calendar className="w-4 h-4" />
                        <span>{formatDate(event.date)}</span>
                      </div>
                      
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <Clock className="w-4 h-4" />
                        <span>{event.time}</span>
                      </div>
                      
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <MapPin className="w-4 h-4" />
                        <span className="line-clamp-1">{event.location}</span>
                      </div>
                      
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <Users className="w-4 h-4" />
                        <span>{event.attendees.toLocaleString()} attending</span>
                      </div>
                    </div>
                    
                    {/* Price and Action */}
                    <div className="flex items-center justify-between">
                      <div>
                        <span className="text-lg font-bold text-green-600">
                          {event.price}
                        </span>
                      </div>
                      
                      <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-1 text-sm font-medium">
                        View Details
                        <ExternalLink className="w-3 h-3" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Footer */}
        <footer className="text-center mt-20 pb-8">
          <p className="text-gray-500">
            Try searching for different cities to discover local events!
          </p>
        </footer>
      </div>
    </div>
  );
};

export default EventFinder;
