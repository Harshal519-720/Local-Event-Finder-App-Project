import flet as ft
import requests
import geocoder
from datetime import datetime


API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"
CATEGORIES = ["All", "Music", "Sports", "Arts & Theater", "Film", "Miscellaneous"]

def get_user_city():
    try:
        g = geocoder.ip('me')
        return g.city or ""
    except:
        return ""

def translate(text, lang):
    translations = {
        "English": text,
        "Español": text.replace("Venue", "Lugar").replace("Date", "Fecha").replace("Time", "Hora"),
        "Français": text.replace("Venue", "Lieu").replace("Date", "Date").replace("Time", "Heure")
    }
    return translations.get(lang, text)

def fetch_events(city, category):
    classification = "" if category == "All" else f"&classificationName={category}"
    base_url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=200{classification}"
    all_events = []
    page = 0
    now = datetime.now().date()

    while True:
        url = f"{base_url}&page={page}"
        try:
            response = requests.get(url)
            data = response.json()

            if "_embedded" not in data or "events" not in data["_embedded"]:
                break

            events = data["_embedded"]["events"]
            for e in events:
                raw_date = e["dates"]["start"].get("localDate", "Unknown")
                try:
                    event_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                    if event_date < now:
                        continue
                except:
                    continue

                name = e.get("name", "N/A")
                raw_time = e["dates"]["start"].get("localTime", "Unknown")
                venue = e["_embedded"]["venues"][0].get("name", "Unknown Venue")

                try:
                    date = event_date.strftime("%B %d, %Y")
                except:
                    date = raw_date

                try:
                    time_obj = datetime.strptime(raw_time, "%H:%M:%S") if len(raw_time) > 5 else datetime.strptime(raw_time, "%H:%M")
                    time = time_obj.strftime("%I:%M %p")
                except:
                    time = raw_time

                entry = f"\U0001F389 {name}\n\U0001F3DF️ Venue: {venue}\n\U0001F4C5 Date: {date}\n⏰ Time: {time}\n{'-'*40}"
                all_events.append((entry, event_date))

            if page >= data.get("page", {}).get("totalPages", 0) - 1:
                break

            page += 1

        except Exception as e:
            all_events.append((f"\u274C Error: {e}", datetime.max))
            break

    if not all_events:
        return [(f"\u26A0\uFE0F No events found for '{city}'.", datetime.max)]
    return sorted(all_events, key=lambda x: x[1])

def main(page: ft.Page):
    page.title = "Eventure - Flet Edition"
    page.scroll = ft.ScrollMode.AUTO
    page.theme_mode = ft.ThemeMode.LIGHT

    language = ft.Ref[ft.Dropdown]()
    city_input = ft.Ref[ft.TextField]()
    category_select = ft.Ref[ft.Dropdown]()
    output_box = ft.Ref[ft.Text]()

    def update_results(city, category):
        output_box.current.value = f"\n\U0001F4CD Showing events for: {city}\n"
        events = fetch_events(city, category)
        for text, _ in events:
            translated = translate(text, language.current.value)
            output_box.current.value += translated + "\n\n"
        page.update()

    def on_search_click(e):
        city = city_input.current.value.strip()
        cat = category_select.current.value
        if city:
            update_results(city, cat)

    user_city = get_user_city()

    page.add(
        ft.Row([
            ft.Text("Eventure", size=30, weight=ft.FontWeight.BOLD),
            ft.Spacer(),
            ft.Dropdown(ref=language, width=150, options=[
                ft.dropdown.Option("English"),
                ft.dropdown.Option("Español"),
                ft.dropdown.Option("Français")
            ], value="English")
        ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
        ft.Row([
            ft.TextField(ref=city_input, label="Enter City", value=user_city, width=200),
            ft.Dropdown(ref=category_select, width=180, options=[ft.dropdown.Option(cat) for cat in CATEGORIES], value="All"),
            ft.ElevatedButton("Search", on_click=on_search_click)
        ], alignment=ft.MainAxisAlignment.CENTER, spacing=10),
        ft.Text(ref=output_box, selectable=True, expand=True, max_lines=999, font_family="monospace")
    )

    if user_city:
        update_results(user_city, "All")

ft.app(target=main)

