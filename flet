import flet as ft
import requests
import geocoder
from datetime import datetime


def get_user_city():
    try:
        g = geocoder.ip('me')
        return g.city or ""
    except:
        return ""


def fetch_all_events(city, category):
    API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"
    classification = "" if category == "All" else f"&classificationName={category}"
    base_url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=200{classification}"
    all_events = []
    page = 0
    now = datetime.now().date()

    while True:
        url = f"{base_url}&page={page}"
        try:
            response = requests.get(url)
            data = response.json()

            if "_embedded" not in data or "events" not in data["_embedded"]:
                break

            events = data["_embedded"]["events"]
            for e in events:
                raw_date = e["dates"]["start"].get("localDate", "Unknown")
                try:
                    event_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                    if event_date < now:
                        continue
                except:
                    continue

                name = e.get("name", "N/A")
                raw_time = e["dates"]["start"].get("localTime", "Unknown")
                venue = e["_embedded"]["venues"][0].get("name", "Unknown Venue")

                try:
                    date = event_date.strftime("%B %d, %Y")
                except:
                    date = raw_date

                try:
                    time_obj = datetime.strptime(raw_time, "%H:%M:%S") if len(raw_time) > 5 else datetime.strptime(raw_time, "%H:%M")
                    time = time_obj.strftime("%I:%M %p")
                except:
                    time = raw_time

                entry = f"üéâ {name}\nüèüÔ∏è Venue: {venue}\nüìÖ Date: {date}\n‚è∞ Time: {time}\n{'-'*40}"
                all_events.append({"text": entry, "event_date": event_date})

            if page >= data.get("page", {}).get("totalPages", 0) - 1:
                break

            page += 1

        except Exception as e:
            all_events.append({"text": f"‚ùå Error: {e}", "event_date": datetime.max})
            break

    if not all_events:
        return [{"text": f"‚ö†Ô∏è No events found for '{city}'.", "event_date": datetime.max}]
    return sorted(all_events, key=lambda x: x["event_date"])


def main(page: ft.Page):
    page.title = "Eventure - Flet Edition"
    page.scroll = ft.ScrollMode.AUTO
    page.theme_mode = ft.ThemeMode.LIGHT
    page.window_width = 720
    page.window_height = 700

    language_options = ["English", "Espa√±ol", "Fran√ßais"]
    categories = ["All", "Music", "Sports", "Arts & Theater", "Film", "Miscellaneous"]

    city_input = ft.TextField(label="Enter City", width=200)
    category_dropdown = ft.Dropdown(options=[ft.dropdown.Option(cat) for cat in categories], width=200, value="All")
    language_dropdown = ft.Dropdown(options=[ft.dropdown.Option(lang) for lang in language_options], width=150, value="English")
    output_box = ft.TextField(multiline=True, read_only=True, value="", expand=True, height=500, text_size=14)

    last_results = []

    def translate(text, lang):
        translations = {
            "English": text,
            "Espa√±ol": text.replace("Venue", "Lugar").replace("Date", "Fecha").replace("Time", "Hora"),
            "Fran√ßais": text.replace("Venue", "Lieu").replace("Date", "Date").replace("Time", "Heure")
        }
        return translations.get(lang, text)

    def refresh_output():
        translated = [translate(r["text"], language_dropdown.value) for r in last_results]
        output_box.value = "\n\n".join(translated)
        page.update()

    def on_search_click(e):
        nonlocal last_results
        city = city_input.value.strip()
        category = category_dropdown.value
        output_box.value = f"üìç Showing events near: {city}\n\n"
        page.update()
        last_results = fetch_all_events(city, category)
        refresh_output()

    city_row = ft.Row([
        city_input,
        category_dropdown,
        ft.ElevatedButton("üîç Search", on_click=on_search_click),
        language_dropdown
    ], alignment=ft.MainAxisAlignment.CENTER, spacing=10)

    page.add(ft.Column([
        ft.Text("Eventure", size=32, weight="bold"),
        city_row,
        output_box
    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER))

    user_city = get_user_city()
    if user_city:
        city_input.value = user_city
        output_box.value = f"üìç Showing events near: {user_city}\n\n"
        last_results.extend(fetch_all_events(user_city, category_dropdown.value))
        refresh_output()

ft.app(target=main, view=ft.WEB_BROWSER)
