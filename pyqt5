import sys
import requests
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton,
    QTextEdit, QVBoxLayout, QHBoxLayout, QFrame, QSpacerItem, QSizePolicy,
    QComboBox, QDialog, QDialogButtonBox, QMenu, QToolButton
)
from PyQt5.QtGui import QFont, QPixmap, QCursor
from PyQt5.QtCore import Qt


class LanguageDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Select Language")
        self.setFixedSize(300, 160)
        layout = QVBoxLayout()

        label = QLabel("Choose a language:")
        label.setFont(QFont("Segoe UI", 11))
        layout.addWidget(label)

        self.language_box = QComboBox()
        self.language_box.setFont(QFont("Segoe UI", 11))
        self.language_box.addItems(["English", "Espa√±ol", "Fran√ßais"])
        layout.addWidget(self.language_box)

        self.buttons = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.buttons.button(QDialogButtonBox.Ok).setFont(QFont("Segoe UI", 10))
        self.buttons.button(QDialogButtonBox.Cancel).setFont(
            QFont("Segoe UI", 10))
        self.buttons.accepted.connect(self.accept)
        self.buttons.rejected.connect(self.reject)
        layout.addWidget(self.buttons)

        self.setLayout(layout)

    def selected_language(self):
        return self.language_box.currentText()


class EventureApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Eventure - Color Emoji Edition")
        self.setGeometry(100, 100, 720, 660)
        self.setStyleSheet("background-color: #f2f2f2;")
        self.dark_mode = False
        self.language = "English"
        self.init_ui()

    def init_ui(self):
        self.logo_label = QLabel()
        self.logo_path_light = "C:/Users/sunny/Desktop/eventure_transparent.png"
        self.logo_path_dark = "C:/Users/sunny/Desktop/eventure_white.png"
        self.set_logo(self.logo_path_light)

        self.logo_label.setStyleSheet("background-color: transparent;")
        self.logo_label.setAlignment(Qt.AlignLeft | Qt.AlignTop)

        settings_button = QToolButton()
        settings_button.setText("‚öôÔ∏è")
        settings_button.setCursor(Qt.PointingHandCursor)
        settings_button.setFixedSize(48, 48)
        settings_button.setPopupMode(QToolButton.InstantPopup)
        settings_button.setMenu(self.create_settings_menu())
        settings_button.setStyleSheet("""
            QToolButton {
                font-size: 24px;
                border: none;
            }
            QToolButton::menu-indicator {
                image: none;
            }
        """)

        header_row = QHBoxLayout()
        header_row.setContentsMargins(0, 0, 0, 0)
        header_row.setSpacing(5)
        header_row.setAlignment(Qt.AlignTop)
        header_row.addWidget(self.logo_label)
        header_row.addStretch()
        header_row.addWidget(settings_button)

        city_label = QLabel("Enter City:")
        city_label.setFont(QFont("Segoe UI", 11))

        self.city_input = QLineEdit()
        self.city_input.setPlaceholderText("e.g. New York")
        self.city_input.setFixedWidth(200)
        self.city_input.setFont(QFont("Segoe UI", 11))

        search_button = QPushButton("üîç Search")
        search_button.clicked.connect(self.on_search_click)
        search_button.setCursor(Qt.PointingHandCursor)
        search_button.setFont(QFont("Segoe UI", 10, QFont.Bold))
        search_button.setFixedWidth(100)
        search_button.setStyleSheet(
            "padding: 6px; background-color: #3f51b5; color: white; border: none; border-radius: 5px;")

        self.output_box = QTextEdit()
        self.output_box.setReadOnly(True)
        self.output_box.setFont(QFont("Segoe UI Emoji", 10))
        self.output_box.setStyleSheet(
            "background-color: #ffffff; padding: 10px;")

        input_row = QHBoxLayout()
        input_row.addStretch(1)
        input_row.addWidget(city_label)
        input_row.addSpacing(10)
        input_row.addWidget(self.city_input)
        input_row.addSpacing(10)
        input_row.addWidget(search_button)
        input_row.addStretch(1)

        top_container = QVBoxLayout()
        top_container.setAlignment(Qt.AlignTop)
        top_container.addLayout(header_row)
        top_container.addSpacing(10)
        top_container.addLayout(input_row)

        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        separator.setStyleSheet("margin-top: 10px; margin-bottom: 10px;")

        layout = QVBoxLayout()
        layout.addLayout(top_container)
        layout.addWidget(separator)
        layout.addWidget(self.output_box)

        self.setLayout(layout)

    def set_logo(self, path):
        pixmap = QPixmap(path).scaled(
            400, 140, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.logo_label.setPixmap(pixmap)

    def create_settings_menu(self):
        menu = QMenu()

        toggle_theme_action = menu.addAction("üåì Toggle Dark Mode")
        toggle_theme_action.triggered.connect(self.toggle_theme)

        language_action = menu.addAction("üåê Change Language")
        language_action.triggered.connect(self.open_language_dialog)

        return menu

    def toggle_theme(self):
        if self.dark_mode:
            self.setStyleSheet("")
            self.output_box.setStyleSheet(
                "background-color: #ffffff; color: black; padding: 10px;")
            self.set_logo(self.logo_path_light)
        else:
            self.setStyleSheet("background-color: #121212; color: #ffffff;")
            self.output_box.setStyleSheet(
                "background-color: #2a2a2a; color: #f0f0f0; padding: 10px;")
            self.set_logo(self.logo_path_dark)
        self.dark_mode = not self.dark_mode

    def open_language_dialog(self):
        dialog = LanguageDialog(self)
        if dialog.exec_():
            self.language = dialog.selected_language()

    def on_search_click(self):
        city = self.city_input.text().strip()
        self.output_box.clear()
        results = self.fetch_live_events(city)
        for line in results:
            self.output_box.append(line + "\n")

    def translate(self, text):
        translations = {
            "English": text,
            "Espa√±ol": text.replace("Venue", "Lugar").replace("Date", "Fecha").replace("Time", "Hora"),
            "Fran√ßais": text.replace("Venue", "Lieu").replace("Date", "Date").replace("Time", "Heure")
        }
        return translations.get(self.language, text)

    def fetch_live_events(self, city):
        if not city.strip():
            return ["‚ö†Ô∏è Please enter a valid city name."]

        API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"
        url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=5"

        try:
            response = requests.get(url)
            data = response.json()

            if "_embedded" not in data or "events" not in data["_embedded"]:
                return [f"‚ö†Ô∏è No events found for '{city}'."]

            events = data["_embedded"]["events"]
            event_list = []
            for e in events:
                name = e.get("name", "N/A")
                raw_date = e["dates"]["start"].get("localDate", "Unknown")
                raw_time = e["dates"]["start"].get("localTime", "Unknown")
                venue = e["_embedded"]["venues"][0].get(
                    "name", "Unknown Venue")

                try:
                    date = datetime.strptime(
                        raw_date, "%Y-%m-%d").strftime("%B %d, %Y")
                except:
                    date = raw_date

                try:
                    time_obj = datetime.strptime(raw_time, "%H:%M:%S") if len(
                        raw_time) > 5 else datetime.strptime(raw_time, "%H:%M")
                    time = time_obj.strftime("%I:%M %p")
                except:
                    time = raw_time

                entry = f"\U0001F389 <b>{name}</b><br>\U0001F3DFÔ∏è Venue: {venue}<br>\U0001F4C5 Date: {date}<br>\u23F0 Time: {time}<br><hr>"
                event_list.append(self.translate(entry))
            return event_list

        except Exception as e:
            return [f"‚ùå Error: {e}"]


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = EventureApp()
    window.show()
    sys.exit(app.exec_())
