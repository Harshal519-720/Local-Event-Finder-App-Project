import sys
import requests
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton,
    QTextEdit, QVBoxLayout, QHBoxLayout, QFrame, QSpacerItem, QSizePolicy
)
from PyQt5.QtGui import QFont, QPixmap
from PyQt5.QtCore import Qt


class EventureApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Eventure - Color Emoji Edition")
        self.setGeometry(100, 100, 720, 660)
        self.dark_mode = False
        self.init_ui()

    def init_ui(self):
        # Logo
        logo = QLabel()
        pixmap = QPixmap(
            "C:/Users/sunny/Desktop/download.webp").scaledToHeight(48, Qt.SmoothTransformation)
        logo.setPixmap(pixmap)
        logo.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)

        title = QLabel("Eventure")
        title.setFont(QFont("Segoe UI", 28, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        title.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)

        title_row = QHBoxLayout()
        title_row.setAlignment(Qt.AlignLeft)
        title_row.addWidget(logo)
        title_row.addSpacing(10)
        title_row.addWidget(title)

        city_label = QLabel("Enter City:")
        city_label.setFont(QFont("Segoe UI", 11))

        self.city_input = QLineEdit()
        self.city_input.setPlaceholderText("e.g. New York")
        self.city_input.setFixedWidth(200)
        self.city_input.setFont(QFont("Segoe UI", 11))

        search_button = QPushButton("üîç Search")
        search_button.clicked.connect(self.on_search_click)
        search_button.setCursor(Qt.PointingHandCursor)
        search_button.setFont(QFont("Segoe UI", 10, QFont.Bold))
        search_button.setFixedWidth(100)
        search_button.setStyleSheet(
            "padding: 6px; background-color: #3f51b5; color: white; border: none; border-radius: 5px;")

        self.theme_button = QPushButton("üåì Toggle Theme")
        self.theme_button.setCursor(Qt.PointingHandCursor)
        self.theme_button.setFont(QFont("Segoe UI", 10, QFont.Bold))
        self.theme_button.setFixedWidth(130)
        self.theme_button.clicked.connect(self.toggle_theme)
        self.theme_button.setStyleSheet(
            "padding: 6px; background-color: #444; color: white; border: none; border-radius: 5px;")

        self.output_box = QTextEdit()
        self.output_box.setReadOnly(True)
        self.output_box.setFont(QFont("Segoe UI Emoji", 10))
        self.output_box.setStyleSheet("background-color: #ffffff; padding: 10px;")

        input_row = QHBoxLayout()
        input_row.addStretch(1)
        input_row.addWidget(city_label)
        input_row.addSpacing(10)
        input_row.addWidget(self.city_input)
        input_row.addSpacing(10)
        input_row.addWidget(search_button)
        input_row.addSpacing(10)
        input_row.addWidget(self.theme_button)
        input_row.addStretch(1)

        top_container = QVBoxLayout()
        top_container.setAlignment(Qt.AlignTop)
        top_container.addLayout(title_row)
        top_container.addSpacing(10)
        top_container.addLayout(input_row)

        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        separator.setStyleSheet("margin-top: 10px; margin-bottom: 10px;")

        layout = QVBoxLayout()
        layout.addLayout(top_container)
        layout.addWidget(separator)
        layout.addWidget(self.output_box)

        self.setLayout(layout)

    def toggle_theme(self):
        if self.dark_mode:
            self.setStyleSheet("")
            self.output_box.setStyleSheet("background-color: #ffffff; color: black; padding: 10px;")
            self.theme_button.setStyleSheet("padding: 6px; background-color: #444; color: white; border: none; border-radius: 5px;")
        else:
            self.setStyleSheet("background-color: #121212; color: #ffffff;")
            self.output_box.setStyleSheet("background-color: #2a2a2a; color: #f0f0f0; padding: 10px;")
            self.theme_button.setStyleSheet("padding: 6px; background-color: #888; color: black; border: none; border-radius: 5px;")
        self.dark_mode = not self.dark_mode

    def on_search_click(self):
        city = self.city_input.text().strip()
        self.output_box.clear()
        results = self.fetch_live_events(city)
        for line in results:
            self.output_box.append(line + "\n")

    def fetch_live_events(self, city):
        if not city.strip():
            return ["‚ö†Ô∏è Please enter a valid city name."]

        API_KEY = "qGDnOricwKqTRb66e5xyDWPYOWsQGDCT"
        url = f"https://app.ticketmaster.com/discovery/v2/events.json?apikey={API_KEY}&city={city}&size=5"

        try:
            response = requests.get(url)
            data = response.json()

            if "_embedded" not in data or "events" not in data["_embedded"]:
                return [f"‚ö†Ô∏è No events found for '{city}'."]

            events = data["_embedded"]["events"]
            event_list = []
            for e in events:
                name = e.get("name", "N/A")
                raw_date = e["dates"]["start"].get("localDate", "Unknown")
                raw_time = e["dates"]["start"].get("localTime", "Unknown")
                venue = e["_embedded"]["venues"][0].get(
                    "name", "Unknown Venue")

                try:
                    date = datetime.strptime(
                        raw_date, "%Y-%m-%d").strftime("%B %d, %Y")
                except:
                    date = raw_date

                try:
                    time_obj = datetime.strptime(raw_time, "%H:%M:%S") if len(
                        raw_time) > 5 else datetime.strptime(raw_time, "%H:%M")
                    time = time_obj.strftime("%I:%M %p")
                except:
                    time = raw_time

                event_list.append(
                    f"\U0001F389 <b>{name}</b><br>"
                    f"\U0001F3DFÔ∏è Venue: {venue}<br>"
                    f"\U0001F4C5 Date: {date}<br>"
                    f"\u23F0 Time: {time}<br>"
                    f"<hr>"
                )
            return event_list

        except Exception as e:
            return [f"‚ùå Error: {e}"]


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = EventureApp()
    window.show()
    sys.exit(app.exec_())
